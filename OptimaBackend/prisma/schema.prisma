// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId                  String                    @id @default(cuid())
  userName                String                    @unique
  hashedPassword          String
  Habits                  Habit[]
  Projects                Project[]
  ProjectMember           ProjectMember[]
  ProjecctInvites         ProjecctInvites[]
  NotificationSubcription NotificationSubcription[]
}

model Habit {
  habitId      String       @id @default(cuid())
  habitName    String
  description  String?
  unit         String?
  HabitEntry   HabitEntry[]
  quantifiable Boolean
  remindMe     Boolean
  remindTime   String?
  user         User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId       String
  createdAt    DateTime     @default(now())
}

model HabitEntry {
  entryId      Int      @id @default(autoincrement())
  quantity     Float?
  habit        Habit    @relation(fields: [habitHabitId], references: [habitId], onDelete: Cascade)
  habitHabitId String
  createdAt    DateTime @default(now())
}

model Project {
  projectId       String            @id @default(cuid())
  projectName     String
  description     String?
  startDate       DateTime
  hasDeadLine     Boolean
  deadLine        DateTime?
  admin           User              @relation(fields: [adminId], references: [userId], onDelete: Cascade)
  adminId         String
  SubTask         SubTask[]
  ProjectMember   ProjectMember[]
  ProjecctInvites ProjecctInvites[]
  status          String?
  createdAt       DateTime?         @default(now())
}

model SubTask {
  subTaskId        Int               @id @default(autoincrement())
  subTaskName      String
  project          Project           @relation(fields: [projectProjectId], references: [projectId], onDelete: Cascade)
  projectProjectId String
  AssignedSubtask  AssignedSubtask[]
  status           String?
}

model ProjectMember {
  projectMemberId  Int               @id @default(autoincrement())
  project          Project           @relation(fields: [projectProjectId], references: [projectId], onDelete: Cascade)
  projectProjectId String
  member           User              @relation(fields: [userUserId], references: [userId], onDelete: Cascade)
  userUserId       String
  AssignedSubtask  AssignedSubtask[]
}

model AssignedSubtask {
  assignmentId                 Int           @id @default(autoincrement())
  subtask                      SubTask       @relation(fields: [subTaskSubTaskId], references: [subTaskId], onDelete: Cascade)
  subTaskSubTaskId             Int
  member                       ProjectMember @relation(fields: [projectMemberProjectMemberId], references: [projectMemberId], onDelete: Cascade)
  projectMemberProjectMemberId Int
}

model ProjecctInvites {
  id               Int       @id @default(autoincrement())
  project          Project   @relation(fields: [projectProjectId], references: [projectId], onDelete: Cascade)
  projectProjectId String
  user             User      @relation(fields: [userUserId], references: [userId], onDelete: Cascade)
  userUserId       String
  state            String
  createdAt        DateTime? @default(now())
}

model NotificationSubcription {
  id           Int    @id @default(autoincrement())
  subscription Json
  user         User   @relation(fields: [userUserId], references: [userId], onDelete: Cascade)
  userUserId   String
}
